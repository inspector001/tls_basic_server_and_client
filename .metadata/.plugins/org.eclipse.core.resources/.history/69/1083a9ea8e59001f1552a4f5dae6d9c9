package com.sgnn7.tools;

import java.security.cert.*;
import java.security.*;
import java.security.interfaces.RSAPrivateKey;
import java.io.*;

public class ExportAsPKCS12 {
	static String storeName = "client";
	static String keystoreFullName = storeName + ".keystore";
	static char[] storePassword = "changeit".toCharArray();

	static String pkcs12Store = storeName + "keys.p12";
	static char[] pkcs12Password = "changeit".toCharArray();

	static RSAPrivateKey privateKey = null;
	static X509Certificate[] certificateChain = null;

	static public void main(String[] args) {
		try {
			exportFromJKS();
			importIntoPKCS12();
		} catch (Throwable t) {
			t.printStackTrace();
			System.err.println("Program exiting");
		}
	}

	@SuppressWarnings("unchecked")
	static void exportFromJKS() throws Exception {
		// Load the JKS key store.
		KeyStore keyStore = KeyStore.getInstance("JKS");
		FileInputStream fileInputStream = new FileInputStream(keystoreFullName);
		keyStore.load(fileInputStream, storePassword);
		fileInputStream.close();

		// Get first available key entry from the JKS file.
		String alias;
		for (java.util.Enumeration aliasEnumerator = keyStore.aliases(); aliasEnumerator.hasMoreElements();) {
			alias = (String) aliasEnumerator.nextElement();
			if (keyStore.isKeyEntry(alias)) {
				privateKey = (RSAPrivateKey) keyStore.getKey(alias, storePassword);
				java.security.cert.Certificate[] chain = keyStore
						.getCertificateChain(alias);
				certificateChain = new X509Certificate[chain.length];

				for (int i = 0; i < chain.length; i++)
					certificateChain[i] = (X509Certificate) chain[i];
				System.out.println("Exporting key entry with alias: " + alias);
				break;
			}
		}
		if (certificateChain == null)
			throw new Exception("Error! No key entry found in JKS file:	" + keystoreFullName);
	}

	static void importIntoPKCS12() throws Exception {
		// Create a PKCS#12 key store.
		KeyStore keyStore = KeyStore.getInstance("pkcs12");
		keyStore.load(null, null);

		// Import/insert the exported key entry into PKCS#12 key store.
		keyStore.setKeyEntry("", privateKey, pkcs12Password, certificateChain);

		// Save key store on disk.
		FileOutputStream fileOutputStream = new FileOutputStream(pkcs12Store);
		keyStore.store(fileOutputStream, pkcs12Password);
		fileOutputStream.close();

		System.out
				.println("Import of key entry into PKCS#12 key store succeeded.");
	}
}